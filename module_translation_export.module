<?php
/**
 * Implements hook_menu()
 * @return string
 */
function module_translation_export_menu() {
  $items['admin/config/regional/translate/module_translation_export'] = array(
    'title' => 'Module translation export',
    'description' => 'Exports per module translations including context',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('module_translation_export_simple_form'),
    'access arguments' => array('translate interface'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => TRUE,
    );
  return $items;
}

/**
 * 
 * Implements hook_form()
 * @param type $form
 * @param type $form_submit
 * @return string
 */
function module_translation_export_simple_form($form, &$form_submit) {
  if (!user_access('translate interface')) {
    drupal_set_message(t("You do not have permission to access this page"));
    return;
  }
  $langNames = get_languages();
  
  $form['extract_lang'] = array(
    '#title' => t('Language to export'),
    '#type' => 'select',
    '#options' => $langNames,
    '#required' => TRUE,
    '#description' => t('Language to export entries from'),
  );
  
  $moduleNames = get_module_names();
    
  $form['extract_module'] = array(
    '#title' => t('Module to export'),
    '#type' => 'select',
    '#options' => $moduleNames,
    '#required' => TRUE,
    '#description' => t('Module to export from'),
  );
  
  $textgroupNames = get_textgroups();
  
  $form['extract_textgroup'] = array(
    '#title' => t('Textgroup to export'),
    '#type' => 'select',
    '#options' => $textgroupNames,
    '#required' => TRUE,
    '#description' => t('Textgroup to export entries from'),
    '#default_value' => 'field',
  );
  
  $form['extract_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Export'),
  );
  return $form;
}

/**
 * Returns an array of languages
 * @return type
 */
function get_languages() {
  $languages = array();
  $query = db_select("languages", "l");
  $query->fields("l", array("language", "native"));
  $result = $query->execute();
  while($res = $result->fetchAssoc()) {
    $languages[$res["language"]] = $res["native"];
  }
  return $languages;
}

/**
 * Returns an array of languages
 * @return type
 */
function get_textgroups() {
  $textgroups = array();
  $query = db_select("locales_source", "ls");
  $query->distinct();
  $query->fields("ls", array("textgroup"));
  $query->condition("textgroup", "default", "<>");
  $result = $query->execute();
  while($res = $result->fetchAssoc()) {
    $textgroups[$res["textgroup"]] = $res["textgroup"];
  }
  return $textgroups;
}

function get_module_names() {
  $moduleList = module_list(TRUE, FALSE, TRUE);
  return $moduleList;
}

/**
 * 
 * Generates the po file from the DB.
 * It does not read the module files for t() entries as POTX does.
 * It will also have false positives when the module name is a part of another module name
 * TODO: Plurals, select textgroup
 * 
 * @global type $user
 * @param type $form
 * @param type $form_state
 */
function module_translation_export_simple_form_submit($form, &$form_state){
  global $user;
  $lang = $form_state['values']['extract_lang'];
  $module = $form_state['values']['extract_module'];
  $textgroup = $form_state['values']['extract_textgroup'];
  $filename = $module.".".$lang.".po";
  header("Content-Disposition: attachment; filename=$filename");
  header("Content-Type: text/plain; charset=utf-8");
  
  $query = db_select("locales_source", "ls");
  $query->leftJoin("locales_target", "lt", "ls.lid = lt.lid");
  $query->leftJoin("i18n_string", "i", "ls.lid = i.lid");
  $query_and = db_and();
  $query_or = db_or();
  
  $query_or->condition("ls.location", "%:{$module}:%", "LIKE")
           ->condition("i.objectid", $module, "=");
  $query_and->condition("ls.textgroup", $textgroup, "=");
  $query->fields("ls", array("source", "context", "textgroup", "lid", "location"))
        ->fields("lt", array("translation"));
  $query->condition($query_or)
        ->condition($query_and);
  $result = $query->execute();
  $hout = array();
  $hout[]= "# Translation of ".$module." on ".variable_get('site_name', 'Drupal').", generated by module translation export";
  $hout[]= '# Generated by ' . $user->name . ' <' . $user->mail . '>';
  $hout[]= "#";
  $hout[]= 'msgid ""';
  $hout[]= 'msgstr ""';
  $hout[]= '"Project-Id-Version: '.$module.'\n"';
  $hout[]= '"POT-Creation-Date: '.date("Y-m-d H:iO").'\n"';
  $hout[]= '"PO-Revision-Date: '.date("Y-m-d H:iO").'\n"';
  $hout[]= '"Last-Translator: NAME <EMAIL@ADDRESS>\n"';
  $hout[]= '"Language-Team: LANGUAGE <EMAIL@ADDRESS>\n"';
  $hout[]= '"MIME-Version: 1.0\n"';
  $hout[]= '"Content-Type: text/plain; charset=UTF-8\n"';
  $hout[]= '"Content-Transfer-Encoding: 8bit\n"';
  $hout[]= '"Plural-Forms: nplurals=2; plural=(n!=1);\n"';
  $hout[]= '"Language: '.$lang.'\n"';
  $hout[]= '"X-Generator: module translation export\n"';
  $hout[]= '';
  $header = implode("\n", $hout);

  $out = array();
  /*
   * Plurals (from locale.inc)
   * if ($language->formula && $language->plurals) {
   *   $header .= "\"Plural-Forms: nplurals=" . $language->plurals . "; plural=" . strtr($language->formula, array('$' => '')) . ";\\n\"\n";
   * }
   * 
   */
      
  /**
   * Example:
   * #: field:ting_details_referenced:ting_object:label
   * msgctxt "ting_details_referenced:ting_object:label"
   * msgid "Referenced by"
   * msgstr ""
   */
  while($res = $result->fetchAssoc()) {
    //$out[]= $res["lid"]." - ".$res["context"] . " - ".$res["source"] . " - " . $res["translation"] . " - " . $res["textgroup"];
    $out[]= '#: '.$res["location"]."\n";
    $out[]= 'msgctxt '._locale_export_string($res["context"]);
    $out[]= 'msgid '._locale_export_string($res["source"]);
    $out[]= 'msgstr '._locale_export_string($res["translation"]);
    $out[]= "\n";
  }
  echo $header.implode("", $out);
  // Quit before anything gets rendered
  drupal_exit();
}
